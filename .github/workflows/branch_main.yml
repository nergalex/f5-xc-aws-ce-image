name: F5 XC AWS Cloud CE - main
on: workflow_dispatch
jobs:
  aws-cloud-ce-module-init-plan-apply:
    runs-on: ubuntu-latest
    environment: demo
    steps:
      - run: echo "The job was automatically triggered by a ${{github.event_name}} event."
      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub."
      - run: echo "The value of your release is ${{ github.ref }} and your release is  ${{ github.release }}."
      - name: Check out release and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: echo "The  ${{ github.release }} release has been cloned to the runner."
      - name: List files in the release
        run: |
          ls -la ${{ github.workspace }}
      - name: Copy the XC API Client key and certificate in PEM format
        env:
          GH_F5XC_CLIENT_API_CERT: ${{ secrets.GH_F5XC_CLIENT_API_CERT }}
          GH_F5XC_CLIENT_API_KEY: ${{ secrets.GH_F5XC_CLIENT_API_KEY }}
        run: |
          mkdir -p f5-xc-cert
          echo "${GH_F5XC_CLIENT_API_CERT}" >> f5-xc-cert/client.crt
          echo "${GH_F5XC_CLIENT_API_KEY}" >> f5-xc-cert/client.key
      - name: List certificate
        run: |
          ls -la ${{ github.workspace }}/f5-xc-cert
      - name: Setup Terraform
        id: setup_tf
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
        continue-on-error: true
      - name: Terraform Init
        id: init
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
        run:  terraform init -upgrade
      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_f5xc_aws_region: "eu-west-3"
          GH_PAT: ${{ secrets.GH_PAT }}
          TF_TOKEN_APP_TERRAFORM_IO: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
          VES_P12_PASSWORD: ${{ secrets.VES_P12_PASSWORD }}
          TF_VAR_f5xc_api_url: ${{ secrets.F5XC_API_URL }}
          TF_VAR_f5xc_tenant: ${{ secrets.F5XC_TENANT }}
          TF_VAR_f5xc_api_token: ${{ secrets.F5XC_API_TOKEN }}
          TF_VAR_f5xc_api_credential_password: ${{ secrets.F5XC_API_CREDENTIAL_PASSWORD }}
          TF_VAR_ssh_public_key_file: ${{ secrets.SSH_PUBLIC_KEY_FILE }}
          TF_VAR_f5xc_aws_cred: ${{ secrets.TF_VAR_F5XC_AWS_CRED }}
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform plan -no-color
        continue-on-error: false
      - name: Terraform Apply
        id: apply
        env:
          TF_VAR_f5xc_aws_region: "eu-west-3"
          GH_PAT: ${{ secrets.GH_PAT }}
          TF_TOKEN_APP_TERRAFORM_IO: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
          TF_VAR_f5xc_api_url: ${{ secrets.F5XC_API_URL }}
          TF_VAR_f5xc_tenant: ${{ secrets.F5XC_TENANT }}
          TF_VAR_f5xc_api_token: ${{ secrets.F5XC_API_TOKEN }}
          TF_VAR_f5xc_api_credential_password: ${{ secrets.F5XC_API_CREDENTIAL_PASSWORD }}
          TF_VAR_ssh_public_key_file: ${{ secrets.SSH_PUBLIC_KEY_FILE }}
          TF_VAR_f5xc_aws_cred: ${{ secrets.TF_VAR_F5XC_AWS_CRED }}
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve -no-color
        continue-on-error: false
      - name: Cleanup environment
        id: cleanup_env
        run: |
          rm main.tf
      - run: echo "This job's status is ${{ job.status }}."
#  aws-cloud-ce-module-reapply:
#    runs-on: ubuntu-latest
#    environment: demo
#    needs: [ aws-cloud-ce-module-apply ]
#    steps:
#      - run: echo "The job was automatically triggered by a ${{github.event_name}} event."
#      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub."
#      - run: echo "The value of your release is ${{ github.ref }} and your release is  ${{ github.release }}."
#      - name: Check out release and submodules
#        uses: actions/checkout@v3
#        with:
#          submodules: recursive
#      - run: echo "The  ${{ github.release }} release has been cloned to the runner."
#      - name: List files in the release
#        run: |
#          ls -la ${{ github.workspace }}
#      - name: Setup Terraform
#        id: setup_tf
#        uses: hashicorp/setup-terraform@v2
#        with:
#          terraform_wrapper: false
#        continue-on-error: true
#      - name: Terraform Init
#        id: init
#        env:
#          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
#        run: terraform init -upgrade
#      - name: Terraform Apply
#        id: reapply
#        env:
#          GH_PAT: ${{ secrets.GH_PAT }}
#          TF_TOKEN_APP_TERRAFORM_IO: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
#          VES_P12_PASSWORD: ${{ secrets.VES_P12_PASSWORD }}
#          TF_VAR_f5xc_api_url: ${{ secrets.F5XC_API_URL }}
#          TF_VAR_f5xc_api_cert: ${{ secrets.TF_VAR_F5XC_API_CERT }}
#          TF_VAR_f5xc_api_key: ${{ secrets.TF_VAR_F5XC_API_KEY }}
#          TF_VAR_f5xc_tenant: ${{ secrets.F5XC_TENANT }}
#          TF_VAR_f5xc_api_token: ${{ secrets.F5XC_API_TOKEN }}
#          TF_VAR_f5xc_api_credential_password: ${{ secrets.F5XC_API_CREDENTIAL_PASSWORD }}
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          TF_VAR_ssh_private_key_file: ${{ secrets.SSH_PRIVATE_KEY_FILE }}
#          TF_VAR_ssh_public_key_file: ${{ secrets.SSH_PUBLIC_KEY_FILE }}
#        run: terraform apply -auto-approve -no-color
#        continue-on-error: false
#      - name: Cleanup environment
#        id: cleanup_env
#        run: |
#          rm main.tf
#      - run: echo "This job's status is ${{ job.status }}."
#  aws-cloud-ce-module-destroy:
#    runs-on: ubuntu-latest
#    environment: demo
#    needs: [aws-cloud-ce-module-reapply]
#    needs: [aws-cloud-ce-module-init-plan-apply]
#    steps:
#      - run: echo "The job was automatically triggered by a ${{github.event_name}} event."
#      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub."
#      - run: echo "The value of your release is ${{ github.ref }} and your release is  ${{ github.release }}."
#      - name: Check out release and submodules
#        uses: actions/checkout@v3
#        with:
#          submodules: recursive
#      - run: echo "The  ${{ github.release }} release has been cloned to the runner."
#      - name: List files in the release
#        run: |
#          ls -la ${{ github.workspace }}
#      - name: Setup Terraform
#        id: setup_tf
#        uses: hashicorp/setup-terraform@v2
#        with:
#          terraform_wrapper: false
#        continue-on-error: true
#      - name: Terraform Init
#        id: init
#        env:
#          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
#        run:  terraform init -upgrade
#      - name: Terraform Destroy
#        id: destroy
#        env:
#          GH_PAT: ${{ secrets.GH_PAT }}
#          TF_TOKEN_APP_TERRAFORM_IO: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
#          VES_P12_PASSWORD: ${{ secrets.VES_P12_PASSWORD }}
#          TF_VAR_f5xc_api_url: ${{ secrets.F5XC_API_URL }}
#          TF_VAR_f5xc_api_cert: ${{ secrets.TF_VAR_F5XC_API_CERT }}
#          TF_VAR_f5xc_api_key: ${{ secrets.TF_VAR_F5XC_API_KEY }}
#          TF_VAR_f5xc_tenant: ${{ secrets.F5XC_TENANT }}
#          TF_VAR_f5xc_api_token: ${{ secrets.F5XC_API_TOKEN }}
#          TF_VAR_f5xc_api_credential_password: ${{ secrets.F5XC_API_CREDENTIAL_PASSWORD }}
#          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          TF_VAR_ssh_private_key_file: ${{ secrets.SSH_PRIVATE_KEY_FILE }}
#          TF_VAR_ssh_public_key_file: ${{ secrets.SSH_PUBLIC_KEY_FILE }}
#        run: terraform destroy -auto-approve -no-color
#        continue-on-error: false
#      - name: Cleanup environment
#        id: cleanup_env
#        run: |
#          rm main.tf
#      - run: echo "This job's status is ${{ job.status }}."