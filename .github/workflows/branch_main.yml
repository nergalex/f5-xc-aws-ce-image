name: F5 XC AWS Cloud CE - main
on: workflow_dispatch
jobs:
#  aws-cloud-ce-module-validate:
#    runs-on: ubuntu-latest
#    environment: demo
#    steps:
#      - run: echo "The job was automatically triggered by a ${{github.event_name}} event."
#      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub."
#      - run: echo "The value of your release is ${{ github.ref }} and your release is ${{ github.release }}."
#      - name: Check out release and submodules
#        uses: actions/checkout@v3
#        with:
#          ref: main
#          fetch-depth: 0
#          submodules: recursive
#      - run: echo "The  ${{ github.release }} release has been cloned to the runner."
#      - name: List files in the release
#        run: |
#          ls -la ${{ github.workspace }}
#      - name: Setup Terraform
#        id: setup_tf
#        uses: hashicorp/setup-terraform@v2
#        with:
#          terraform_wrapper: false
#      - name: Terraform fmt
#        id: fmt
#        run: terraform fmt -check
#        continue-on-error: true
#      - name: Terraform Init
#        id: init
#        env:
#          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
#        run: terraform init -upgrade
#      - name: Terraform Validate
#        id: validate
#        env:
#          TF_VAR_f5xc_api_url: ${{ secrets.F5XC_API_URL }}
#        run: terraform validate -no-color
  aws-cloud-ce-module-plan:
    runs-on: ubuntu-latest
    environment: demo
    # needs: [aws-cloud-ce-module-validate]
    steps:
      - run: echo "The job was automatically triggered by a ${{github.event_name}} event."
      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub."
      - run: echo "The value of your release is ${{ github.ref }} and your release is  ${{ github.release }}."
      - name: Check out release and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: echo "The  ${{ github.release }} release has been cloned to the runner."
      - name: List files in the release
        run: |
          ls -la ${{ github.workspace }}
      - name: Setup Terraform
        id: setup_tf
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
        continue-on-error: true
      - name: Terraform Init
        id: init
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
        run:  terraform init -upgrade
      - name: Terraform Plan
        id: plan
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          TF_TOKEN_APP_TERRAFORM_IO: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
          VES_P12_PASSWORD: "A1rLiquide"
          TF_VAR_f5xc_api_p12_file: "airliquide.console.ves.volterra.io.api-creds.p12"
          TF_VAR_f5xc_api_url: ${{ secrets.F5XC_API_URL }}
          TF_VAR_f5xc_api_cert: ${{ secrets.TF_VAR_F5XC_API_CERT }}
          TF_VAR_f5xc_api_key: ${{ secrets.TF_VAR_F5XC_API_KEY }}
          TF_VAR_f5xc_tenant: ${{ secrets.F5XC_TENANT }}
          TF_VAR_f5xc_api_token: ${{ secrets.F5XC_API_TOKEN }}
          TF_VAR_f5xc_api_credential_password: ${{ secrets.F5XC_API_CREDENTIAL_PASSWORD }}
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_ssh_private_key_file: ${{ secrets.SSH_PRIVATE_KEY_FILE }}
          TF_VAR_ssh_public_key_file: ${{ secrets.SSH_PUBLIC_KEY_FILE }}
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_vpc_cidr_block: ${{ secrets.TF_VAR_AWS_VPC_CIDR_BLOCK }}
          TF_VAR_aws_vpc_name: ${{ secrets.TF_VAR_AWS_VPC_NAME }}
          TF_VAR_f5xc_aws_availability_zone: "a"
          TF_VAR_f5xc_aws_cred: ${{ secrets.TF_VAR_F5XC_AWS_CRED }}
          TF_VAR_f5xc_aws_region: ${{ secrets.TF_VAR_F5XC_AWS_REGION }}
          TF_VAR_f5xc_aws_vpc_slo_subnet: ${{ secrets.TF_VAR_F5XC_AWS_VPC_SLO_SUBNET }}
          TF_VAR_f5xc_ce_gateway_type: ${{ secrets.TF_VAR_F5XC_CE_GATEWAY_TYPE }}
          TF_VAR_f5xc_cluster_latitude: ${{ secrets.TF_VAR_F5XC_CLUSTER_LATITUDE }}
          TF_VAR_f5xc_cluster_longitude: ${{ secrets.TF_VAR_F5XC_CLUSTER_LONGITUDE }}
          TF_VAR_owner: ${{ secrets.TF_VAR_OWNER }}
        run: terraform plan -no-color
        continue-on-error: false
      - name: Cleanup environment
        id: cleanup_env
        run: |
          rm main.tf
      - run: echo "This job's status is ${{ job.status }}."
  aws-cloud-ce-module-apply:
    runs-on: ubuntu-latest
    environment: demo
    needs: [aws-cloud-ce-module-plan]
    steps:
      - run: echo "The job was automatically triggered by a ${{github.event_name}} event."
      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub."
      - run: echo "The value of your release is ${{ github.ref }} and your release is  ${{ github.release }}."
      - name: Check out release and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: echo "The  ${{ github.release }} release has been cloned to the runner."
      - name: List files in the release
        run: |
          ls -la ${{ github.workspace }}
      - name: Setup Terraform
        id: setup_tf
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
        continue-on-error: true
      - name: Terraform Init
        id: init
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
        run:  terraform init -upgrade
      - name: Terraform Apply
        id: apply
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          TF_TOKEN_APP_TERRAFORM_IO: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
          VES_P12_PASSWORD: ${{ secrets.VES_P12_PASSWORD }}
          TF_VAR_f5xc_api_url: ${{ secrets.F5XC_API_URL }}
          TF_VAR_f5xc_api_cert: ${{ secrets.TF_VAR_F5XC_API_CERT }}
          TF_VAR_f5xc_api_key: ${{ secrets.TF_VAR_F5XC_API_KEY }}
          TF_VAR_f5xc_tenant: ${{ secrets.F5XC_TENANT }}
          TF_VAR_f5xc_api_token: ${{ secrets.F5XC_API_TOKEN }}
          TF_VAR_f5xc_api_credential_password: ${{ secrets.F5XC_API_CREDENTIAL_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_ssh_private_key_file: ${{ secrets.SSH_PRIVATE_KEY_FILE }}
          TF_VAR_ssh_public_key_file: ${{ secrets.SSH_PUBLIC_KEY_FILE }}
        run: terraform apply -auto-approve -no-color
        continue-on-error: false
      - name: Cleanup environment
        id: cleanup_env
        run: |
          rm main.tf
      - run: echo "This job's status is ${{ job.status }}."
  aws-cloud-ce-module-reapply:
    runs-on: ubuntu-latest
    environment: demo
    needs: [ aws-cloud-ce-module-apply ]
    steps:
      - run: echo "The job was automatically triggered by a ${{github.event_name}} event."
      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub."
      - run: echo "The value of your release is ${{ github.ref }} and your release is  ${{ github.release }}."
      - name: Check out release and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: echo "The  ${{ github.release }} release has been cloned to the runner."
      - name: List files in the release
        run: |
          ls -la ${{ github.workspace }}
      - name: Setup Terraform
        id: setup_tf
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
        continue-on-error: true
      - name: Terraform Init
        id: init
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
        run: terraform init -upgrade
      - name: Terraform Apply
        id: reapply
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          TF_TOKEN_APP_TERRAFORM_IO: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
          VES_P12_PASSWORD: ${{ secrets.VES_P12_PASSWORD }}
          TF_VAR_f5xc_api_url: ${{ secrets.F5XC_API_URL }}
          TF_VAR_f5xc_api_cert: ${{ secrets.TF_VAR_F5XC_API_CERT }}
          TF_VAR_f5xc_api_key: ${{ secrets.TF_VAR_F5XC_API_KEY }}
          TF_VAR_f5xc_tenant: ${{ secrets.F5XC_TENANT }}
          TF_VAR_f5xc_api_token: ${{ secrets.F5XC_API_TOKEN }}
          TF_VAR_f5xc_api_credential_password: ${{ secrets.F5XC_API_CREDENTIAL_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_ssh_private_key_file: ${{ secrets.SSH_PRIVATE_KEY_FILE }}
          TF_VAR_ssh_public_key_file: ${{ secrets.SSH_PUBLIC_KEY_FILE }}
        run: terraform apply -auto-approve -no-color
        continue-on-error: false
      - name: Cleanup environment
        id: cleanup_env
        run: |
          rm main.tf
      - run: echo "This job's status is ${{ job.status }}."
  aws-cloud-ce-module-destroy:
    runs-on: ubuntu-latest
    environment: demo
    needs: [aws-cloud-ce-module-reapply]
    steps:
      - run: echo "The job was automatically triggered by a ${{github.event_name}} event."
      - run: echo "This job is now running on a ${{ runner.os }} server hosted by GitHub."
      - run: echo "The value of your release is ${{ github.ref }} and your release is  ${{ github.release }}."
      - name: Check out release and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - run: echo "The  ${{ github.release }} release has been cloned to the runner."
      - name: List files in the release
        run: |
          ls -la ${{ github.workspace }}
      - name: Setup Terraform
        id: setup_tf
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
        continue-on-error: true
      - name: Terraform Init
        id: init
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
        run:  terraform init -upgrade
      - name: Terraform Destroy
        id: destroy
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          TF_TOKEN_APP_TERRAFORM_IO: ${{ secrets.TF_TOKEN_APP_TERRAFORM_IO }}
          VES_P12_PASSWORD: ${{ secrets.VES_P12_PASSWORD }}
          TF_VAR_f5xc_api_url: ${{ secrets.F5XC_API_URL }}
          TF_VAR_f5xc_api_cert: ${{ secrets.TF_VAR_F5XC_API_CERT }}
          TF_VAR_f5xc_api_key: ${{ secrets.TF_VAR_F5XC_API_KEY }}
          TF_VAR_f5xc_tenant: ${{ secrets.F5XC_TENANT }}
          TF_VAR_f5xc_api_token: ${{ secrets.F5XC_API_TOKEN }}
          TF_VAR_f5xc_api_credential_password: ${{ secrets.F5XC_API_CREDENTIAL_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_ssh_private_key_file: ${{ secrets.SSH_PRIVATE_KEY_FILE }}
          TF_VAR_ssh_public_key_file: ${{ secrets.SSH_PUBLIC_KEY_FILE }}
        run: terraform destroy -auto-approve -no-color
        continue-on-error: false
      - name: Cleanup environment
        id: cleanup_env
        run: |
          rm main.tf
      - run: echo "This job's status is ${{ job.status }}."